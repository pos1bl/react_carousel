{"version":3,"sources":["data/Data.ts","components/Carousel.tsx","App.tsx","index.tsx"],"names":["InputField","steps","isLast","Carousel","images","step","frameSize","itemWidth","animationDuration","onChangeCarousel","useEffect","carousel","document","getElementById","carouselWrapper","carouselList","carouselItems","getElementsByClassName","prevButton","nextButton","itemWidthInput","frameSizeInput","animationDurationInput","translateValue","window","getComputedStyle","getPropertyValue","split","totalWidth","length","onclick","prevSlide","style","transform","nextSlide","lastSlide","onchange","lastSLide","currentSlide","i","element","width","height","transitionDuration","id","className","map","image","src","alt","htmlFor","onChange","event","value","target","STEP","name","type","min","max","FRAME_SIZE","ITEM_WIDTH","ANIMATION_DURATION","App","useState","setItemWidth","setFrameSize","setStep","setAnimationDuration","ReactDOM","render"],"mappings":"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","file":"static/js/main.c87ce1bc.chunk.js","sourcesContent":["export enum InputField {\n  ITEM_WIDTH = 'itemWidth',\n  FRAME_SIZE = 'frameSize',\n  STEP = 'step',\n  ANIMATION_DURATION = 'animationDuration',\n}\n","import React, { useEffect } from 'react';\n\nimport './Carousel.scss';\nimport { InputField } from '../data/Data';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  onChangeCarousel: (value: number, name: InputField) => void,\n};\n\nlet steps = 0;\nlet isLast = false;\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  onChangeCarousel,\n}) => {\n  useEffect(() => {\n    const carousel = document.getElementById('carousel') as HTMLElement;\n    const carouselWrapper = document\n      .getElementById('carouselWrapper') as HTMLElement;\n    const carouselList = document.getElementById('carouselList') as HTMLElement;\n    const carouselItems = document.getElementsByClassName('Carousel__item');\n    const prevButton = document.getElementById('prevButton') as HTMLElement;\n    const nextButton = document.getElementById('nextButton') as HTMLElement;\n    const itemWidthInput = document\n      .getElementById('itemId') as HTMLElement;\n    const frameSizeInput = document\n      .getElementById('frameId') as HTMLElement;\n    const animationDurationInput = document\n      .getElementById('animationId') as HTMLElement;\n\n    const computedStyle = window.getComputedStyle(carouselList);\n    let translateValue = +computedStyle\n      .getPropertyValue('transform')\n      .split(', ')[4];\n    const totalWidth = itemWidth * images.length;\n\n    prevButton.onclick = () => {\n      const prevSlide = translateValue + (step * itemWidth);\n      const firstSlide = 0;\n\n      isLast = false;\n\n      if (prevSlide > firstSlide) {\n        translateValue = firstSlide;\n      } else {\n        translateValue = prevSlide;\n        steps -= 1;\n      }\n\n      carouselList.style.transform = `translateX(${translateValue}px)`;\n    };\n\n    nextButton.onclick = () => {\n      const nextSlide = translateValue - (step * itemWidth);\n      const lastSlide = -(totalWidth - itemWidth * frameSize);\n\n      if (nextSlide < lastSlide) {\n        translateValue = lastSlide;\n        isLast = true;\n      } else {\n        translateValue = nextSlide;\n        steps += 1;\n      }\n\n      carouselList.style.transform = `translateX(${translateValue}px)`;\n    };\n\n    itemWidthInput.onchange = () => {\n      const lastSLide = -(totalWidth - itemWidth * frameSize);\n      const currentSlide = -(steps * step * itemWidth);\n\n      for (let i = 0; i < carouselItems.length; i += 1) {\n        const element = carouselItems[i] as HTMLElement;\n\n        element.style.width = `${itemWidth}px`;\n        element.style.height = `${itemWidth}px`;\n      }\n\n      carouselWrapper.style.width = `${itemWidth * frameSize}px`;\n      translateValue = isLast\n        ? lastSLide\n        : currentSlide;\n\n      carouselList.style.transform = `translateX(${translateValue}px)`;\n    };\n\n    frameSizeInput.onchange = () => {\n      carouselWrapper.style.width = `${itemWidth * frameSize}px`;\n    };\n\n    animationDurationInput.onchange = () => {\n      carousel.style.transitionDuration = `${animationDuration}ms`;\n    };\n  }, [step, itemWidth, frameSize, animationDuration]);\n\n  return (\n    <div id=\"carousel\" className=\"Carousel\">\n      <div\n        id=\"carouselWrapper\"\n        className=\"Carousel__wrapper\"\n      >\n        <ul\n          id=\"carouselList\"\n          className=\"Carousel__list\"\n        >\n          {images.map((image, id) => (\n            <li\n              id=\"carouselItem\"\n              key={image}\n              className=\"Carousel__item\"\n            >\n              <img\n                className=\"Carousel__image\"\n                src={image}\n                alt={`${id}`}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"Carousel__inputs inputs\">\n        <div className=\"Carousel__input-container input-container\">\n          <label htmlFor=\"stepId\" className=\"Carousel__label\">\n            Step\n          </label>\n\n          <input\n            onChange={(event) => {\n              const value = +event.target.value;\n\n              if (value >= 1 && value <= 10) {\n                onChangeCarousel(value, InputField.STEP);\n              }\n            }}\n            id=\"stepId\"\n            name={InputField.STEP}\n            className=\"Carousel__input\"\n            type=\"range\"\n            min=\"1\"\n            max=\"10\"\n            value={step}\n          />\n        </div>\n        <div className=\"Carousel__input-container input-container\">\n          <label htmlFor=\"frameId\" className=\"Carousel__label\">\n            Frame Size\n          </label>\n\n          <input\n            onChange={(event) => {\n              const value = +event.target.value;\n\n              if (value >= 1 && value <= 10) {\n                onChangeCarousel(value, InputField.FRAME_SIZE);\n              }\n            }}\n            id=\"frameId\"\n            name={InputField.FRAME_SIZE}\n            className=\"Carousel__input\"\n            type=\"range\"\n            min=\"1\"\n            max=\"10\"\n            value={frameSize}\n          />\n        </div>\n        <div className=\"Carousel__input-container input-container\">\n          <label htmlFor=\"itemId\" className=\"Carousel__label\">\n            Item Width\n          </label>\n\n          <input\n            onChange={(event) => {\n              const value = +event.target.value;\n\n              if (value >= 50 && value <= 500) {\n                onChangeCarousel(value, InputField.ITEM_WIDTH);\n              }\n            }}\n            id=\"itemId\"\n            name={InputField.ITEM_WIDTH}\n            className=\"Carousel__input\"\n            type=\"range\"\n            min=\"50\"\n            max=\"500\"\n            value={itemWidth}\n          />\n        </div>\n        <div className=\"Carousel__input-container input-container\">\n          <label htmlFor=\"animationId\" className=\"Carousel__label\">\n            Animation Duration\n          </label>\n\n          <input\n            onChange={(event) => {\n              const value = +event.target.value;\n\n              if (value >= 0 && value <= 5000) {\n                onChangeCarousel(value, InputField.ANIMATION_DURATION);\n              }\n            }}\n            id=\"animationId\"\n            name={InputField.ANIMATION_DURATION}\n            className=\"Carousel__input\"\n            type=\"range\"\n            min=\"0\"\n            max=\"5000\"\n            value={animationDuration}\n          />\n        </div>\n      </div>\n\n      <div className=\"Carousel__buttons buttons\">\n        <button\n          id=\"prevButton\"\n          className=\"Carousel__button Carousel__button--prev\"\n          type=\"button\"\n        >\n          Prev\n        </button>\n\n        <button\n          id=\"nextButton\"\n          className=\"Carousel__button\"\n          type=\"button\"\n          data-cy=\"next\"\n        >\n          Next\n        </button>\n      </div>\n\n      <ul className=\"Carousel__rules rules\">\n        <h2 className=\"rules__title\">\n          RULES\n        </h2>\n        <li className=\"rules__item\">\n          Step from 1 to 10;\n        </li>\n\n        <li className=\"rules__item\">\n          Frame Size from 1 to 10;\n        </li>\n\n        <li className=\"rules__item\">\n          Item Width from 50 to 500px;\n        </li>\n\n        <li className=\"rules__item\">\n          Animation Duration from 0 to 5000ms;\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import { useState } from 'react';\n\nimport './App.scss';\nimport Carousel from './components/Carousel';\nimport { InputField } from './data/Data';\n\nconst images = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nconst App = () => {\n  const [itemWidth, setItemWidth] = useState(130);\n  const [frameSize, setFrameSize] = useState(3);\n  const [step, setStep] = useState(3);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n\n  return (\n    <div className=\"App\">\n      {/* eslint-disable-next-line */}\n      <h1\n        data-cy=\"title\"\n        className=\"App__title title\"\n      >\n        {`Carousel with ${images.length} images`}\n      </h1>\n\n      <Carousel\n        images={images}\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        onChangeCarousel={(value: number, name: InputField) => {\n          switch (name) {\n            case InputField.STEP:\n              setStep(value);\n              break;\n            case InputField.ANIMATION_DURATION:\n              setAnimationDuration(value);\n              break;\n            case InputField.FRAME_SIZE:\n              setFrameSize(value);\n              break;\n            case InputField.ITEM_WIDTH:\n              setItemWidth(value);\n              break;\n            default:\n              break;\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}