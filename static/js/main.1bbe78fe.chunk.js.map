{"version":3,"sources":["data/Data.ts","components/Carousel.tsx","App.tsx","index.tsx"],"names":["InputField","steps","isLast","Carousel","images","step","frameSize","itemWidth","animationDuration","onChangeCarousel","carouselRef","useRef","carouselWrapperRef","carouselListRef","carouselItemsRef","prevButtonRef","nextButtonRef","itemWidthInputRef","frameSizeInputRef","animationDurationInputRef","useEffect","carousel","current","carouselWrapper","carouselList","carouselItems","prevButton","nextButton","itemWidthInput","frameSizeInput","animationDurationInput","translateValue","getComputedStyle","getPropertyValue","split","totalWidth","length","onclick","prevSlide","style","transform","nextSlide","lastSlide","onchange","lastSLide","currentSlide","i","element","width","height","transitionDuration","className","ref","map","image","id","el","src","alt","htmlFor","onChange","event","value","target","STEP","name","type","min","max","FRAME_SIZE","ITEM_WIDTH","ANIMATION_DURATION","App","useState","setItemWidth","setFrameSize","setStep","setAnimationDuration","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1bbe78fe.chunk.js","sourcesContent":["export enum InputField {\n  ITEM_WIDTH = 'itemWidth',\n  FRAME_SIZE = 'frameSize',\n  STEP = 'step',\n  ANIMATION_DURATION = 'animationDuration',\n}\n","import React, { useEffect, useRef } from 'react';\n\nimport './Carousel.scss';\nimport { InputField } from '../data/Data';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  onChangeCarousel: (value: number, name: InputField) => void,\n};\n\nlet steps = 0;\nlet isLast = false;\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  onChangeCarousel,\n}) => {\n  const carouselRef = useRef<HTMLDivElement>(null);\n  const carouselWrapperRef = useRef<HTMLDivElement>(null);\n  const carouselListRef = useRef<HTMLUListElement>(null);\n  const carouselItemsRef = useRef<HTMLLIElement[]>([]);\n  const prevButtonRef = useRef<HTMLButtonElement>(null);\n  const nextButtonRef = useRef<HTMLButtonElement>(null);\n  const itemWidthInputRef = useRef<HTMLInputElement>(null);\n  const frameSizeInputRef = useRef<HTMLInputElement>(null);\n  const animationDurationInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    const carousel = carouselRef.current as HTMLElement;\n    const carouselWrapper = carouselWrapperRef.current as HTMLElement;\n    const carouselList = carouselListRef.current as HTMLElement;\n    const carouselItems = carouselItemsRef.current;\n    const prevButton = prevButtonRef.current as HTMLElement;\n    const nextButton = nextButtonRef.current as HTMLElement;\n    const itemWidthInput = itemWidthInputRef.current as HTMLElement;\n    const frameSizeInput = frameSizeInputRef.current as HTMLElement;\n    const animationDurationInput = animationDurationInputRef\n      .current as HTMLElement;\n\n    const computedStyle = getComputedStyle(carouselList);\n    let translateValue = +computedStyle\n      .getPropertyValue('transform')\n      .split(', ')[4];\n    const totalWidth = itemWidth * images.length;\n\n    prevButton.onclick = () => {\n      const prevSlide = translateValue + (step * itemWidth);\n      const firstSlide = 0;\n\n      isLast = false;\n\n      if (prevSlide > firstSlide) {\n        translateValue = firstSlide;\n      } else {\n        translateValue = prevSlide;\n        steps -= 1;\n      }\n\n      carouselList.style.transform = `translateX(${translateValue}px)`;\n    };\n\n    nextButton.onclick = () => {\n      const nextSlide = translateValue - (step * itemWidth);\n      const lastSlide = -(totalWidth - itemWidth * frameSize);\n\n      if (nextSlide < lastSlide) {\n        translateValue = lastSlide;\n        isLast = true;\n      } else {\n        translateValue = nextSlide;\n        steps += 1;\n      }\n\n      carouselList.style.transform = `translateX(${translateValue}px)`;\n    };\n\n    itemWidthInput.onchange = () => {\n      const lastSLide = -(totalWidth - itemWidth * frameSize);\n      const currentSlide = -(steps * step * itemWidth);\n\n      for (let i = 0; i < carouselItems.length; i += 1) {\n        const element = carouselItems[i] as HTMLElement;\n\n        element.style.width = `${itemWidth}px`;\n        element.style.height = `${itemWidth}px`;\n      }\n\n      carouselWrapper.style.width = `${itemWidth * frameSize}px`;\n      translateValue = isLast\n        ? lastSLide\n        : currentSlide;\n\n      carouselList.style.transform = `translateX(${translateValue}px)`;\n    };\n\n    frameSizeInput.onchange = () => {\n      carouselWrapper.style.width = `${itemWidth * frameSize}px`;\n    };\n\n    animationDurationInput.onchange = () => {\n      carousel.style.transitionDuration = `${animationDuration}ms`;\n    };\n  }, [step, itemWidth, frameSize, animationDuration]);\n\n  return (\n    <div\n      className=\"Carousel\"\n      ref={carouselRef}\n    >\n      <div\n        className=\"Carousel__wrapper\"\n        ref={carouselWrapperRef}\n      >\n        <ul\n          className=\"Carousel__list\"\n          ref={carouselListRef}\n        >\n          {images.map((image, id) => (\n            <li\n              key={image}\n              className=\"Carousel__item\"\n              ref={(el) => {\n                if (el) {\n                  carouselItemsRef.current[id] = el;\n                }\n              }}\n            >\n              <img\n                className=\"Carousel__image\"\n                src={image}\n                alt={`${id}`}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"Carousel__inputs inputs\">\n        <div className=\"Carousel__input-container input-container\">\n          <label htmlFor=\"stepId\" className=\"Carousel__label\">\n            Step\n          </label>\n\n          <input\n            onChange={(event) => {\n              const value = +event.target.value;\n\n              if (value >= 1 && value <= 10) {\n                onChangeCarousel(value, InputField.STEP);\n              }\n            }}\n            id=\"stepId\"\n            name={InputField.STEP}\n            className=\"Carousel__input\"\n            type=\"range\"\n            min=\"1\"\n            max=\"10\"\n            value={step}\n          />\n        </div>\n        <div className=\"Carousel__input-container input-container\">\n          <label htmlFor=\"frameId\" className=\"Carousel__label\">\n            Frame Size\n          </label>\n\n          <input\n            onChange={(event) => {\n              const value = +event.target.value;\n\n              if (value >= 1 && value <= 10) {\n                onChangeCarousel(value, InputField.FRAME_SIZE);\n              }\n            }}\n            id=\"frameId\"\n            name={InputField.FRAME_SIZE}\n            className=\"Carousel__input\"\n            type=\"range\"\n            min=\"1\"\n            max=\"10\"\n            value={frameSize}\n            ref={frameSizeInputRef}\n          />\n        </div>\n        <div className=\"Carousel__input-container input-container\">\n          <label htmlFor=\"itemId\" className=\"Carousel__label\">\n            Item Width\n          </label>\n\n          <input\n            onChange={(event) => {\n              const value = +event.target.value;\n\n              if (value >= 50 && value <= 500) {\n                onChangeCarousel(value, InputField.ITEM_WIDTH);\n              }\n            }}\n            id=\"itemId\"\n            name={InputField.ITEM_WIDTH}\n            className=\"Carousel__input\"\n            type=\"range\"\n            min=\"50\"\n            max=\"500\"\n            value={itemWidth}\n            ref={itemWidthInputRef}\n          />\n        </div>\n        <div className=\"Carousel__input-container input-container\">\n          <label htmlFor=\"animationId\" className=\"Carousel__label\">\n            Animation Duration\n          </label>\n\n          <input\n            onChange={(event) => {\n              const value = +event.target.value;\n\n              if (value >= 0 && value <= 5000) {\n                onChangeCarousel(value, InputField.ANIMATION_DURATION);\n              }\n            }}\n            id=\"animationId\"\n            name={InputField.ANIMATION_DURATION}\n            className=\"Carousel__input\"\n            type=\"range\"\n            min=\"0\"\n            max=\"5000\"\n            value={animationDuration}\n            ref={animationDurationInputRef}\n          />\n        </div>\n      </div>\n\n      <div className=\"Carousel__buttons buttons\">\n        <button\n          className=\"Carousel__button Carousel__button--prev\"\n          type=\"button\"\n          ref={prevButtonRef}\n        >\n          Prev\n        </button>\n\n        <button\n          className=\"Carousel__button\"\n          type=\"button\"\n          data-cy=\"next\"\n          ref={nextButtonRef}\n        >\n          Next\n        </button>\n      </div>\n\n      <ul className=\"Carousel__rules rules\">\n        <h2 className=\"rules__title\">\n          RULES\n        </h2>\n        <li className=\"rules__item\">\n          Step from 1 to 10;\n        </li>\n\n        <li className=\"rules__item\">\n          Frame Size from 1 to 10;\n        </li>\n\n        <li className=\"rules__item\">\n          Item Width from 50 to 500px;\n        </li>\n\n        <li className=\"rules__item\">\n          Animation Duration from 0 to 5000ms;\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import { useState } from 'react';\n\nimport './App.scss';\nimport Carousel from './components/Carousel';\nimport { InputField } from './data/Data';\n\nconst images = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nconst App = () => {\n  const [itemWidth, setItemWidth] = useState(130);\n  const [frameSize, setFrameSize] = useState(3);\n  const [step, setStep] = useState(3);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n\n  return (\n    <div className=\"App\">\n      {/* eslint-disable-next-line */}\n      <h1\n        data-cy=\"title\"\n        className=\"App__title title\"\n      >\n        {`Carousel with ${images.length} images`}\n      </h1>\n\n      <Carousel\n        images={images}\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        onChangeCarousel={(value: number, name: InputField) => {\n          switch (name) {\n            case InputField.STEP:\n              setStep(value);\n              break;\n            case InputField.ANIMATION_DURATION:\n              setAnimationDuration(value);\n              break;\n            case InputField.FRAME_SIZE:\n              setFrameSize(value);\n              break;\n            case InputField.ITEM_WIDTH:\n              setItemWidth(value);\n              break;\n            default:\n              break;\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}